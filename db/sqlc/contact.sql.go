// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: contact.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts(
    first_name,
    last_name,
    phone_number,
    street,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING contact_id, first_name, last_name, phone_number, street, created_at, updated_at
`

type CreateContactParams struct {
	FirstName   string           `json:"first_name"`
	LastName    string           `json:"last_name"`
	PhoneNumber string           `json:"phone_number"`
	Street      string           `json:"street"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, createContact,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Street,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Street,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE contact_id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, contactID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteContact, contactID)
	return err
}

const getContactById = `-- name: GetContactById :one
SELECT contact_id, first_name, last_name, phone_number, street, created_at, updated_at FROM contacts
WHERE contact_id = $1 LIMIT 1
`

func (q *Queries) GetContactById(ctx context.Context, contactID pgtype.UUID) (Contact, error) {
	row := q.db.QueryRow(ctx, getContactById, contactID)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Street,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listContacts = `-- name: ListContacts :many
SELECT contact_id, first_name, last_name, phone_number, street, created_at, updated_at FROM contacts
ORDER BY contact_id
LIMIT $1
OFFSET $2
`

type ListContactsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListContacts(ctx context.Context, arg ListContactsParams) ([]Contact, error) {
	rows, err := q.db.Query(ctx, listContacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.Street,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET
first_name = coalesce($1, first_name),
last_name = coalesce($2, last_name),
phone_number = coalesce($3, phone_number),
street = coalesce($4, street),
updated_at = coalesce($5, updated_at)
WHERE contact_id = $6
RETURNING contact_id, first_name, last_name, phone_number, street, created_at, updated_at
`

type UpdateContactParams struct {
	FirstName   pgtype.Text      `json:"first_name"`
	LastName    pgtype.Text      `json:"last_name"`
	PhoneNumber pgtype.Text      `json:"phone_number"`
	Street      pgtype.Text      `json:"street"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	ContactID   pgtype.UUID      `json:"contact_id"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, updateContact,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Street,
		arg.UpdatedAt,
		arg.ContactID,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Street,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
